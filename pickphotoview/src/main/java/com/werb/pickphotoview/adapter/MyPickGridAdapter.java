package com.werb.pickphotoview.adapter;import android.content.Intent;import android.net.Uri;import android.os.Handler;import android.os.Looper;import android.provider.MediaStore;import android.support.v4.app.Fragment;import android.support.v7.widget.RecyclerView;import android.util.DisplayMetrics;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.RequestManager;import com.werb.pickphotoview.R;import com.werb.pickphotoview.activity.PickParentActivity;import com.werb.pickphotoview.fragment.PickPhotoFragment;import com.werb.pickphotoview.util.PickConfig;import com.werb.pickphotoview.util.PickUtils;import com.werb.pickphotoview.view.MySeletedView;import java.io.File;import java.io.IOException;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;/** * Created by wanbo on 2016/12/31. * <p> * 任务大厅专属图片选取页面adapter */public class MyPickGridAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private List<String> imagePaths;    private boolean isShowCamera;    private int spanCount;    private int maxSelectSize;    private List<String> selectPath;    private View.OnClickListener imgClick;    private int scaleSize;    private RequestManager manager;    private PickPhotoFragment fragment;    public MyPickGridAdapter(Fragment fragment, RequestManager manager, List<String> imagePaths, boolean isShowCamera, int spanCount, int maxSelectSize, View.OnClickListener imgClick) {        this.fragment = (PickPhotoFragment) fragment;        this.manager = manager;        this.imagePaths = imagePaths;        this.isShowCamera = isShowCamera;        this.spanCount = spanCount;        this.maxSelectSize = maxSelectSize;        this.imgClick = imgClick;        selectPath = new ArrayList<>();        buildScaleSize();        //从上一次记录的path开始        selectPath.clear();        selectPath = ((PickParentActivity) fragment.getActivity()).getSelectPath();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == PickConfig.CAMERA_TYPE) {            return new CameraViewHolder(LayoutInflater.from(fragment.getActivity()).inflate(R.layout.pick_item_camera_layout, parent, false));        } else {            return new GridImageViewHolder(LayoutInflater.from(fragment.getActivity()).inflate(R.layout.pick_item_grid_layout_new, parent, false));        }    }    private static final String TAG = "MyPickGridAdapter";    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof GridImageViewHolder) {            String path;            if (isShowCamera) {                path = imagePaths.get(position - 1);            } else {                path = imagePaths.get(position);            }            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            gridImageViewHolder.bindItem(path);        }    }    @Override    public int getItemViewType(int position) {        if (isShowCamera) {            if (position == 0) {                return PickConfig.CAMERA_TYPE;            } else {                return position;            }        } else {            return position;        }    }    @Override    public int getItemCount() {        if (isShowCamera) {            return imagePaths.size() + 1;        } else {            return imagePaths.size();        }    }    @Override    public void onViewRecycled(RecyclerView.ViewHolder holder) {        if (holder instanceof GridImageViewHolder) {            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            Glide.clear(gridImageViewHolder.weekImage);        }        super.onViewRecycled(holder);    }    // ViewHolder    private class GridImageViewHolder extends RecyclerView.ViewHolder {        private ImageView selectImage, weekImage;        private FrameLayout selectLayout;        public ImageView gridImage;        public MySeletedView mySelectedView;        GridImageViewHolder(View itemView) {            super(itemView);            gridImage = (ImageView) itemView.findViewById(R.id.iv_grid);            selectImage = (ImageView) itemView.findViewById(R.id.iv_select);            selectLayout = (FrameLayout) itemView.findViewById(R.id.frame_select_layout);            mySelectedView = (MySeletedView) itemView.findViewById(R.id.my_selected_view);            /**             * 目前能够得到的结论是：             * 1.  绝对不可以通过RecyclerView.LayoutParams给item的父布局设置leftMargin等属性值，否则grid列表滑动卡顿，内存占用足以导致OOM             * 2.  必须手动给item的ImageView设置宽高。以及其他子view设置宽高。注意必须同时设置宽高。             * 3.  ImageView及其他子view的宽度可以设置的很大（远超出ImageViwe及其他子View应该占据的宽度）都可以。             * 4.  把ImageView的宽度及其他子view的宽度设置的很大可以实现itemDecoration space的正确值。             */            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) gridImage.getLayoutParams();//            params.width = scaleSize;//            params.height = scaleSize;            DisplayMetrics metrics = fragment.getActivity().getResources().getDisplayMetrics();            int widthPixels = metrics.widthPixels;            float v3 = metrics.density * 3;            float vallWidth = widthPixels - 2 * v3;            params.height = (int) (vallWidth / 3.0f);//            params.width = (int) (vallWidth / 3.0f) * 2;            params.width = widthPixels;            RelativeLayout.LayoutParams mySelectedViewLayoutParams =                    (RelativeLayout.LayoutParams) mySelectedView.getLayoutParams();//            mySelectedViewLayoutParams.width = (int) (vallWidth / 3.0f) * 2;            mySelectedViewLayoutParams.width = widthPixels;            mySelectedViewLayoutParams.height = (int) (vallWidth / 3.0f);            mySelectedView.setLayoutParams(mySelectedViewLayoutParams);            final WeakReference<ImageView> imageViewWeakReference = new WeakReference<>(gridImage);            weekImage = imageViewWeakReference.get();        }        void bindItem(final String path) {            if (selectPath.contains(path)) {                select();            } else {                unSelect();            }            if (weekImage != null) {                handler.post(new Runnable() {                    @Override                    public void run() {                        manager                                .load(Uri.parse("file://" + path))                                .dontAnimate()                                .crossFade()                                .into(weekImage);                    }                });                selectLayout.setTag(R.id.pick_image_path, path);//                if (maxSelectSize == 1) {//                    selectLayout.setOnClickListener(singleClick);//                } else {//                    selectLayout.setOnClickListener(moreClick);//                }                weekImage.setTag(R.id.pick_image_path, path);//                if (maxSelectSize == 1) {//                    weekImage.setOnClickListener(singleClick);//                } else {//                    weekImage.setOnClickListener(moreClick);//                }                weekImage.setOnClickListener(moreClick);                //上一次selected view 标记                if (selectPath.contains(path)) {                    mySelectedView.setVisibility(View.VISIBLE);                } else {                    mySelectedView.setVisibility(View.GONE);                }            }        }        /**         * 是否已经被选中         */        void select() {            selectImage.setBackgroundDrawable(fragment.getActivity().getResources().getDrawable(R.mipmap.pick_ic_select));            selectImage.setTag(R.id.pick_is_select, true);        }        void unSelect() {            selectImage.setBackgroundDrawable(fragment.getActivity().getResources().getDrawable(R.mipmap.pick_ic_un_select));            selectImage.setTag(R.id.pick_is_select, false);        }        void addPath(String path) {            if (!selectPath.contains(path)) {                selectPath.add(path);                //同步已选取的photo                List<String> selectPathAll = ((PickParentActivity) fragment.getActivity()).getSelectPath();                if (!selectPathAll.contains(path))                    selectPathAll.add(path);                fragment.updateSelectText(MyPickGridAdapter.this.selectPath.size());                mySelectedView.setVisibility(View.VISIBLE);            }        }        void removePath(String path) {            selectPath.remove(path);            //同步已取消的photo            ((PickParentActivity) fragment.getActivity()).getSelectPath().remove(path);            fragment.updateSelectText(selectPath.size());            mySelectedView.setVisibility(View.GONE);        }        /**         * 多张图片选择。         */        View.OnClickListener moreClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                String path = (String) v.getTag(R.id.pick_image_path);//                boolean isSelect = (boolean) selectImage.getTag(R.id.pick_is_select);//                if (isSelect) {//                    if (selectPath.contains(path)) {//                        unSelect();//                        removePath(path);//                        mySelectedView.setVisibility(View.GONE);//                    }//                } else {//                    if (selectPath.size() < maxSelectSize) {//                        if (!selectPath.contains(path)) {//                            select();//                            addPath(path);//                            mySelectedView.setVisibility(View.VISIBLE);//                        }//                    } else {//                        Toast.makeText(fragment.getActivity(), String.format(fragment.getActivity().getString(R.string.pick_photo_size_limit), String.valueOf(maxSelectSize)), Toast.LENGTH_SHORT).show();//                    }//                }                if (selectPath.contains(path)) {                    removePath(path);                } else {                    if (selectPath.size() < 9) {                        if (!selectPath.contains(path)) {                            addPath(path);                        }                    } else {                        Toast.makeText(fragment.getActivity(), String.format(fragment.getActivity().getString(R.string.pick_photo_size_limit), String.valueOf(9)), Toast.LENGTH_SHORT).show();                    }                }            }        };        /**         * 选择单张图片。         */        View.OnClickListener singleClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                String path = (String) v.getTag(R.id.pick_image_path);                select();                addPath(path);                fragment.select();            }        };    }    private class CameraViewHolder extends RecyclerView.ViewHolder {        CameraViewHolder(View itemView) {            super(itemView);            ViewGroup.LayoutParams params = itemView.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;            itemView.setOnClickListener(cameraClick);        }        View.OnClickListener cameraClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    File photoFile = PickUtils.getInstance(fragment.getActivity()).getPhotoFile();                    if (photoFile.exists()) {                        photoFile.delete();                    }                    if (photoFile.createNewFile()) {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        intent.putExtra(MediaStore.EXTRA_OUTPUT, PickUtils.getInstance(fragment.getActivity()).getUri(photoFile));                        fragment.startActivityForResult(intent, PickConfig.CAMERA_PHOTO_DATA);                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        };    }    private void buildScaleSize() {        int screenWidth = PickUtils.getInstance(fragment.getActivity()).getWidthPixels();        int space = PickUtils.getInstance(fragment.getActivity()).dp2px(PickConfig.ITEM_SPACE);        scaleSize = (screenWidth - (spanCount + 1) * space) / spanCount;    }    public List<String> getSelectPath() {        return selectPath;    }    private Handler handler = new Handler(Looper.getMainLooper());}